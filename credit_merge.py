# -*- coding: utf-8 -*-
"""credit_Merge.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13GuFJrAvLx81tI2BzE6VFD5s9X0Zf9TO
"""

import numpy as np 
import pandas as pd 
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns
pd.set_option("max_columns",0)

from google.colab import drive
drive.mount('/content/drive')

df_bu = pd.read_csv('/content/drive/MyDrive/Naya - Keren Ohad Rotem/CSV/df_bureau.csv')
df_prev = pd.read_csv('/content/drive/MyDrive/Naya - Keren Ohad Rotem/CSV/df_prev.csv')
df_pos = pd.read_csv('/content/drive/MyDrive/Naya - Keren Ohad Rotem/CSV/df_pos.csv')
df_inst = pd.read_csv('/content/drive/MyDrive/Naya - Keren Ohad Rotem/CSV/df_inst.csv')
df_app = pd.read_csv('/content/drive/MyDrive/Naya - Keren Ohad Rotem/CSV/df_app.csv')

print(df_bu.shape, df_prev.shape, df_pos.shape, df_inst.shape, df_app.shape)

df_pos.drop(columns=['Unnamed: 0'], inplace=True)
df_inst.drop(columns=['Unnamed: 0'], inplace=True)
df_app.drop(columns=['Unnamed: 0'], inplace=True)

df_tot=df_app.merge(df_bu,on=['SK_ID_CURR'])
df_tot=df_tot.merge(df_prev,on=['SK_ID_CURR'])
df_tot=df_tot.merge(df_pos,on=['SK_ID_CURR'])
df_tot=df_tot.merge(df_inst,on=['SK_ID_CURR'])

df_tot.dtypes.value_counts()

# df_tot.info()

int_col = ['AMT_INCOME_TOTAL', 'AMT_CREDIT', 'AMT_ANNUITY', 'DAYS_LAST_PHONE_CHANGE',
           'BU_SUM_LOAN', 'BU_SUM_OPEN_DEBT', 'mean_anuuity', 'mean_amt_application',
           'MEAN_NUM_INSTALMENT', 'MEAN_PAYMENT', 'MEAN_PAY_DIFF', 'MEAN_PAY_DELAY']

round_2_col = ['Active_x', 'Closed', 'mean_percent_approval', 'mean_down_pay',                        
               'Active_y', 'Completed', 'Debt', 'NUM_UNPAID_LOANS']

df_tot[round_2_col] = df_tot[round_2_col].round(2)
df_tot[int_col] = df_tot[int_col].astype('int64')

df_tot.dtypes.value_counts()

# df_tot

# df_tot.columns

name_dic = {
    'SK_ID_CURR': 'ID', 
    'TARGET': 'TARGET', 
    'CODE_GENDER': 'GENDER',
    'FLAG_OWN_CAR': 'OWN_CAR', 
    'FLAG_OWN_REALTY': 'OWN_REALTY', 
    'CNT_CHILDREN': 'CNT_CHILDREN', 
    'AMT_INCOME_TOTAL': 'AMT_INCOME',
    'AMT_CREDIT': 'AMT_APP', 
    'AMT_ANNUITY': 'AMT_ANNUITY', 
    'DAYS_BIRTH': 'DAYS_BIRTH',
    'DAYS_EMPLOYED': 'DAYS_EMPLOYED', 
    'DAYS_LAST_PHONE_CHANGE': 'PHONE_CHANGE', 
    'NAME_HOUSING_TYPE_House / apartment': 'TYPE_HOUSE:House',
    'NAME_HOUSING_TYPE_Municipal apartment': 'TYPE_HOUSE:Municipal',
    'NAME_HOUSING_TYPE_Rented apartment': 'TYPE_HOUSE:Rented', 
    'NAME_HOUSING_TYPE_With parents': 'TYPE_HOUSE:Parents',
    'REGION_RATING_CLIENT_W_CITY_A': 'REGION_RATING:A', 
    'REGION_RATING_CLIENT_W_CITY_B': 'REGION_RATING:B',
    'REGION_RATING_CLIENT_W_CITY_C': 'REGION_RATING:C',
    'NAME_INCOME_TYPE_Commercial associate': 'TYPE_INCOME:Associate', 
    'NAME_INCOME_TYPE_Pensioner': 'TYPE_INCOME:Pensioner',
    'NAME_INCOME_TYPE_Unemployed': 'TYPE_INCOME:Unemployed', 
    'NAME_INCOME_TYPE_Working': 'TYPE_INCOME:Working',
    'NAME_EDUCATION_TYPE_Higher education': 'TYPE_EDUCATIOM:Higher',
    'NAME_EDUCATION_TYPE_Incomplete higher': 'TYPE_EDUCATIOM:Incomplete',
    'NAME_EDUCATION_TYPE_Secondary': 'TYPE_EDUCATIOM:Secondary', 
    'NAME_FAMILY_STATUS_Married': 'FAMILY_STATUS:Married',
    'NAME_FAMILY_STATUS_Widow': 'FAMILY_STATUS:Widow', 
    'NAME_FAMILY_STATUS_not married': 'FAMILY_STATUS:Single',
   
    'Active_x': 'BU_PER_ACCTIVE', 
    'Closed': 'BU_PER_CLOSED',

    'NUM_LOANS': 'HC_NUM_APP', 
    'mean_amt_application': 'HC_MEAN_AMT_APP',
    'mean_percent_approval': 'HC_MEAN_PER_AMT_APPROVAL',
    'Active_y': 'HC_PER_ACCTIVE',
    'Completed': 'HC_PER_CLOSED', 
    'Debt': 'HC_PER_DEBT',
    'mean_down_pay': 'HC_MEAN_PER_DOWN',
    'mean_anuuity': 'HC_MEAN_ANNUITY',

    'MEAN_NUM_INSTALMENT': 'HC_MEAN_NUM_INST', 
    'MEAN_PAYMENT': 'HC_MEAN_AMT_INST',
    'MEAN_PAY_DIFF': 'HC_MEAN_AMT_DIFF_INST', 
    'MEAN_PAY_DELAY': 'HC_MEAN_DELAY_INST', 
    'NUM_UNPAID_LOANS': 'HC_PER_UNPAID_INST' 
}

df_tot = df_tot.rename(columns=name_dic)

col_tot = ['ID','TARGET','GENDER','OWN_CAR', 'OWN_REALTY', 'CNT_CHILDREN',
       'AMT_INCOME', 'AMT_APP', 'AMT_ANNUITY', 'DAYS_BIRTH', 'DAYS_EMPLOYED',
       'PHONE_CHANGE', 
       
       'TYPE_HOUSE:House', 'TYPE_HOUSE:Municipal', 'TYPE_HOUSE:Rented', 'TYPE_HOUSE:Parents',
       'REGION_RATING:A', 'REGION_RATING:B', 'REGION_RATING:C', 'TYPE_INCOME:Associate',
       'TYPE_INCOME:Pensioner', 'TYPE_INCOME:Unemployed', 'TYPE_INCOME:Working',
       'TYPE_EDUCATIOM:Higher', 'TYPE_EDUCATIOM:Incomplete', 'TYPE_EDUCATIOM:Secondary',
       'FAMILY_STATUS:Married', 'FAMILY_STATUS:Widow', 'FAMILY_STATUS:Single',
       
       'BU_NUM_LOAN', 'BU_SUM_LOAN', 'BU_SUM_OPEN_DEBT', 'BU_PER_ACCTIVE', 'BU_PER_CLOSED',
       
       'HC_NUM_APP', 'HC_MEAN_AMT_APP', 'HC_MEAN_PER_AMT_APPROVAL', 
       'HC_PER_ACCTIVE', 'HC_PER_CLOSED', 'HC_PER_DEBT', 'HC_MEAN_PER_DOWN', 'HC_MEAN_ANNUITY', 

       'HC_MEAN_NUM_INST', 'HC_MEAN_AMT_INST', 'HC_MEAN_DELAY_INST', 'HC_MEAN_AMT_DIFF_INST', 
       'HC_PER_UNPAID_INST']

df_tot=df_tot[col_tot]

# df_tot

df_tot.to_csv('/content/drive/MyDrive/Naya - Keren Ohad Rotem/CSV/df_total.csv', index=True)